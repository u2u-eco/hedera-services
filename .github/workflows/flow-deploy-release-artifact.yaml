##
# Copyright (C) 2022-2023 Hedera Hashgraph, LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
##
name: "Deploy Release Artifact"
on:
  workflow_dispatch:
    inputs:
      #      new-version:
      #        description: "New Version:"
      #        type: string
      #        required: false
      #        default: ""
      #      trigger-env-deploy:
      #        description: "Deploy to Environment:"
      #        type: choice
      #        required: true
      #        options:
      #          - none
      #          - integration
      #          - preview
      #        default: none
      dry-run-enabled:
        description: "Perform Dry Run"
        type: boolean
        required: false
        default: false
      java-version:
        description: "Java JDK Version:"
        type: string
        required: false
        default: "17.0.3"
      java-distribution:
        description: "Java JDK Distribution:"
        type: string
        required: false
        default: "temurin"
      gradle-version:
        description: "Gradle Version:"
        type: string
        required: false
        default: "wrapper"
  push:
    branches:
      - develop
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+-?*"

defaults:
  run:
    shell: bash

jobs:
  release-adhoc:
    name: Release / Adhoc
    if: ${{ github.event_name == 'workflow_dispatch' }}
    uses: ./.github/workflows/comp-build-release-artifact.yaml
    with:
      #      version-policy: ${{ github.event.inputs.new-verison != '' && 'specified' || 'branch-commit' }}
      version-policy: branch-commit
      #      new-version: ${{ github.event.inputs.new-version }}
      #      trigger-env-deploy: ${{ github.event.inputs.trigger-env-deploy }}
      trigger-env-deploy: none
      dry-run-enabled: ${{ github.event.inputs.dry-run-enabled == 'true' }}
      java-version: ${{ github.event.inputs.java-version || '17.0.3' }}
      java-distribution: ${{ github.event.inputs.java-distribution || 'temurin' }}
      gradle-version: ${{ github.event.inputs.gradle-version || 'wrapper' }}

    secrets:
      access-token: ${{ secrets.GITHUB_TOKEN }}
      bucket-name: ${{ secrets.RELEASE_ARTIFACT_BUCKET_NAME }}
      jenkins-integration-url: ${{ secrets.RELEASE_JENKINS_INTEGRATION_URL }}
      jenkins-preview-url: ${{ secrets.RELEASE_JENKINS_PREVIEW_URL }}

  prepare-tag-release:
    name: Release / Tag / Prepare
    runs-on: [self-hosted, Linux, medium, ephemeral]
    if: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v') }}
    outputs:
      version: ${{ steps.tag.outputs.version }}
      prerelease: ${{ steps.tag.outputs.prerelease }}
    steps:
      - name: Install Semantic Version Tools
        run: |
          echo "::group::Download SemVer Binary"
          sudo curl -L -o /usr/local/bin/semver https://raw.githubusercontent.com/fsaintjacques/semver-tool/master/src/semver
          echo "::endgroup::"
          echo "::group::Change SemVer Binary Permissions"
          sudo chmod -v +x /usr/local/bin/semver
          echo "::endgroup::"
          echo "::group::Show SemVer Binary Version Info"
          semver --version
          echo "::endgroup::"

      - name: Extract Tag Version
        id: tag
        run: |
          RELEASE_VERSION="$(semver get release "${{ github.ref_name }}")"
          PRERELEASE_VERSION="$(semver get prerel "${{ github.ref_name }}")"

          FINAL_VERSION="${RELEASE_VERSION}"
          PRERELEASE_FLAG="false"
          [[ -n "${PRERELEASE_VERSION}" ]] && FINAL_VERSION="${RELEASE_VERSION}-${PRERELEASE_VERSION}"
          [[ -n "${PRERELEASE_VERSION}" ]] && PRERELEASE_FLAG="true"

          echo "version=${FINAL_VERSION}" >>"${GITHUB_OUTPUT}"
          echo "prerelease=${PRERELEASE_FLAG}" >>"${GITHUB_OUTPUT}"

  release-tag:
    name: Release / Tag
    uses: ./.github/workflows/comp-build-release-artifact.yaml
    needs:
      - prepare-tag-release
    with:
      version-policy: specified
      new-version: ${{ needs.prepare-tag-release.outputs.version }}
      trigger-env-deploy: preview
    secrets:
      access-token: ${{ secrets.GITHUB_TOKEN }}
      bucket-name: ${{ secrets.RELEASE_ARTIFACT_BUCKET_NAME }}
      jenkins-integration-url: ${{ secrets.RELEASE_JENKINS_INTEGRATION_URL }}
      jenkins-preview-url: ${{ secrets.RELEASE_JENKINS_PREVIEW_URL }}

  release-branch:
    name: Release / Branch
    uses: ./.github/workflows/comp-build-release-artifact.yaml
    if: ${{ github.event_name == 'push' && !startsWith(github.ref, 'refs/tags/v') }}
    with:
      version-policy: branch-commit
      trigger-env-deploy: integration
    secrets:
      access-token: ${{ secrets.GITHUB_TOKEN }}
      bucket-name: ${{ secrets.RELEASE_ARTIFACT_BUCKET_NAME }}
      jenkins-integration-url: ${{ secrets.RELEASE_JENKINS_INTEGRATION_URL }}
      jenkins-preview-url: ${{ secrets.RELEASE_JENKINS_PREVIEW_URL }}

  prepare-mc-release:
    name: Release / MC / Prepare
    runs-on: [self-hosted, Linux, medium, ephemeral]
    needs:
      - prepare-tag-release
      - release-adhoc
      - release-tag
      - release-branch
    outputs:
      payload: ${{ steps.dispatch.outputs.payload }}
    if: ${{ always() }}
    steps:
      - name: Install JSON Tools
        run: |
          if ! command -v jq >/dev/null 2>&1; then
            echo "::group::Setup JQ Command"
            sudo apt update
            sudo apt install -y jq
            echo "::endgroup::"
          fi

          JQ_VERSION="$(jq --version)"
          if [[ "${JQ_VERSION}" != "jq-1.6" ]]; then
            echo "::group::Updating JQ Version"
            sudo apt update
            sudo apt upgrade -y jq
            echo "::endgroup::"
          fi

          if ! command -v tee >/dev/null 2>&1; then
            echo "::group::Setup Tee Command"
            sudo apt update
            sudo apt install -y coreutils
            echo "::endgroup::"
          fi

          echo "::group::Show JQ Version"
          jq --version
          echo "::endgroup::"

      - name: Prepare Dispatch Payload
        id: dispatch
        env:
          REQ_IS_TAG_PUSH: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v') }}
        run: |
          VERSION_POLICY="snapshot"
          VERSION_NUM=""
          if [[ -n "${REQ_IS_TAG_PUSH}" && "${REQ_IS_TAG_PUSH}" == true ]]; then
            VERSION_POLICY="specified"
            VERSION_NUM="${{ needs.prepare-tag-release.outputs.version }}"
          fi

          REQ_JSON="$(jq --compact-output --null-input \
                      --arg ref "${{ github.ref }}" \
                      --arg jdist "${{ github.event.inputs.java-distribution || 'temurin' }}" \
                      --arg jver "${{ github.event.inputs.java-version || '17.0.3' }}" \
                      --arg gver "${{ github.event.inputs.gradle-version || 'wrapper' }}" \
                      --arg vpol "${VERSION_POLICY}" \
                      --arg vnum "${VERSION_NUM}" \
                      '{"ref": $ref, "java": {"distribution": $jdist, "version": $jver}, "gradle": {"version": $gver}, "release": {"version": {"policy": $vpol, "number": $vnum}}}')"

          echo "payload=${REQ_JSON}" >>"${GITHUB_OUTPUT}"
          printf "## Dispatch Payload\n\`\`\`json\n%s\n\`\`\`\n" "$(jq '.' <<<"${REQ_JSON}")" >>"${GITHUB_STEP_SUMMARY}"

  dispatch-mc-release:
    name: Release / MC / Dispatch
    runs-on: [self-hosted, Linux, medium, ephemeral]
    needs:
      - prepare-mc-release
      - release-adhoc
      - release-tag
      - release-branch
    if: ${{ (needs.release-tag.result == 'success' || needs.release-branch.result == 'success' || needs.release-adhoc.result == 'success') && needs.prepare-mc-release.result == 'success' && always() }}
    steps:
      - name: Repository Dispatch
        uses: peter-evans/repository-dispatch@26b39ed245ab8f31526069329e112ab2fb224588 # pin@v2
        with:
          token: ${{ secrets.GH_ACCESS_TOKEN }}
          repository: hashgraph/hedera-internal-workflows
          event-type: hedera-svcs-mc-release
          client-payload: ${{ needs.prepare-mc-release.outputs.payload }}
