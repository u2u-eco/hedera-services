/*
 * Copyright (C) 2022-2023 Hedera Hashgraph, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.hedera.node.app.service.evm.store.contracts.precompile.codec;

import static org.junit.jupiter.api.Assertions.assertEquals;

import com.google.protobuf.ByteString;
import java.util.ArrayList;
import java.util.List;
import org.apache.tuweni.bytes.Bytes;
import org.hyperledger.besu.datatypes.Address;
import org.junit.jupiter.api.Test;

class EvmEncodingFacadeTest {

    private final EvmEncodingFacade subject = new EvmEncodingFacade();

    public static final Address senderAddress = Address.ALTBN128_PAIRING;

    private static final Bytes RETURN_DECIMALS_10 =
            Bytes.fromHexString(
                    "0x000000000000000000000000000000000000000000000000000000000000000a");

    private static final Bytes RETURN_3 =
            Bytes.fromHexString(
                    "0x0000000000000000000000000000000000000000000000000000000000000003");

    private static final Bytes RETURN_TOTAL_SUPPLY_FOR_50_TOKENS =
            Bytes.fromHexString(
                    "0x0000000000000000000000000000000000000000000000000000000000000032");

    private static final Bytes RETURN_TRUE =
            Bytes.fromHexString(
                    "0x0000000000000000000000000000000000000000000000000000000000000001");

    private static final Bytes RETURN_GET_TOKEN_TYPE =
            Bytes.fromHexString(
                    "0x00000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000001");

    private static final Bytes RETURN_IS_TOKEN_FROZEN =
            Bytes.fromHexString(
                    "0x00000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000"
                        + "000000000000000000000000001");

    private static final Bytes RETURN_SUCCESS_TRUE =
            Bytes.fromHexString(
                    "0x0000000000000000000000000000000000000000000000000000000000000016"
                            + "0000000000000000000000000000000000000000000000000000000000000001");

    private static final Bytes RETURN_IS_TOKEN =
            Bytes.fromHexString(
                    "0x00000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000001");

    private static final Bytes RETURN_NAME_TOKENA =
            Bytes.fromHexString(
                    "0x000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000"
                        + "00000000000000000000006546f6b656e410000000000000000000000000000000000000000000000000000");

    private static final Bytes RETURN_SYMBOL_F =
            Bytes.fromHexString(
                    "0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000"
                        + "00000000000000000000000014600000000000000000000000000000000000000000000000000000000000000");

    private static final Bytes RETURN_TOKEN_URI_FIRST =
            Bytes.fromHexString(
                    "0x000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000"
                        + "000000000000000000000000054649525354000000000000000000000000000000000000000000000000000000");

    private static final Bytes RETURN_ADDRESS =
            Bytes.fromHexString(
                    "0x0000000000000000000000000000000000000000000000000000000000000008");

    private static final Bytes RETURN_GET_TOKEN_INFO =
            Bytes.fromHexString(
                    "");

    private static final Bytes RETURN_GET_FUNGIBLE_TOKEN_INFO =
            Bytes.fromHexString(
                    "");

    private static final Bytes RETURN_GET_NON_FUNGIBLE_TOKEN_CUSTOM_FEES =
            Bytes.fromHexString(
                    "0x00000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000028000000000000000000000000000000000000000000000000000000000000003600000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000006400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005ca000000000000000000000000000000000000000000000000000000000000006400000000000000000000000000000000000000000000000000000000000005cc0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005ca000000000000000000000000000000000000000000000000000000000000003200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005ca0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000f0000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000032000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005ca0000000000000000000000000000000000000000000000000000000000000000");

    private static final Bytes RETURN_GET_TOKEN_KEY =
            Bytes.fromHexString(
                    "0x000000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000209e417334d2ea6be459624060e3efdc1b459a884bc6a9c232349af35e9060ed620000000000000000000000000000000000000000000000000000000000000000");

    public static final Bytes RETURN_GET_EXPIRY_INFO_FOR_TOKEN =
            Bytes.fromHexString(
                    "0x0000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000006368e20c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000076a700");

    public static final Bytes RETURN_GET_NON_FUNGIBLE_TOKEN_INFO =
            Bytes.fromHexString(
                    "");

    @Test
    void decodeReturnResultForDecimals() {
        final var decodedResult = subject.encodeDecimals(10);
        assertEquals(RETURN_DECIMALS_10, decodedResult);
    }

    @Test
    void decodeReturnResultForAllowanceERC() {
        final var decodedResult = subject.encodeAllowance(3);
        assertEquals(RETURN_3, decodedResult);
    }

    @Test
    void decodeReturnResultForTotalSupply() {
        final var decodedResult = subject.encodeTotalSupply(50);
        assertEquals(RETURN_TOTAL_SUPPLY_FOR_50_TOKENS, decodedResult);
    }

    @Test
    void decodeReturnResultForBalance() {
        final var decodedResult = subject.encodeBalance(3);
        assertEquals(RETURN_3, decodedResult);
    }

    @Test
    void decodeReturnResultForIsApprovedForAllERC() {
        final var decodedResult = subject.encodeIsApprovedForAll(true);
        assertEquals(RETURN_TRUE, decodedResult);
    }

    @Test
    void decodeReturnResultForGetTokenType() {
        final var decodedResult = subject.encodeGetTokenType(1);
        assertEquals(RETURN_GET_TOKEN_TYPE, decodedResult);
    }

    @Test
    void decodeReturnResultForIsFrozen() {
        final var decodedResult = subject.encodeIsFrozen(true);
        assertEquals(RETURN_IS_TOKEN_FROZEN, decodedResult);
    }

    @Test
    void decodeReturnResultForGetTokenDefaultFreezeStatus() {
        final var decodedResult = subject.encodeGetTokenDefaultFreezeStatus(true);
        assertEquals(RETURN_SUCCESS_TRUE, decodedResult);
    }

    @Test
    void decodeReturnResultForGetTokenDefaultKycStatus() {
        final var decodedResult = subject.encodeGetTokenDefaultKycStatus(true);
        assertEquals(RETURN_SUCCESS_TRUE, decodedResult);
    }

    @Test
    void decodeReturnResultForIsKyc() {
        final var decodedResult = subject.encodeIsKyc(true);
        assertEquals(RETURN_SUCCESS_TRUE, decodedResult);
    }

    @Test
    void decodeReturnResultForIsToken() {
        final var decodedResult = subject.encodeIsToken(true);
        assertEquals(RETURN_IS_TOKEN, decodedResult);
    }

    @Test
    void decodeReturnResultForName() {
        final var decodedResult = subject.encodeName("TokenA");
        assertEquals(RETURN_NAME_TOKENA, decodedResult);
    }

    @Test
    void decodeReturnResultForSymbol() {
        final var decodedResult = subject.encodeSymbol("F");
        assertEquals(RETURN_SYMBOL_F, decodedResult);
    }

    @Test
    void decodeReturnResultForTokenUri() {
        final var decodedResult = subject.encodeTokenUri("FIRST");
        assertEquals(RETURN_TOKEN_URI_FIRST, decodedResult);
    }

    @Test
    void decodeReturnResultForOwner() {
        final var decodedResult = subject.encodeOwner(senderAddress);
        assertEquals(RETURN_ADDRESS, decodedResult);
    }

    @Test
    void decodeReturnResultForGetApprovedERC() {
        final var decodedResult = subject.encodeGetApproved(senderAddress);
        assertEquals(RETURN_ADDRESS, decodedResult);
    }

    @Test
    void decodeGetTokenInfo() {
        final var tokenInfo =
                new EvmTokenInfo(
                        fromHexString("0x03"),
                        1,
                        false,
                        "IQDXDFDE",
                        "primary",
                        "JUMP",
                        Address.wrap(
                                Bytes.fromHexString("0x00000000000000000000000000000000000005cc")),
                        500L,
                        1000L,
                        1,
                        1665659019L);

        tokenInfo.setAutoRenewAccount(
                Address.wrap(Bytes.fromHexString("0x00000000000000000000000000000000000005cd")));
        tokenInfo.setIsPaused(true);
        tokenInfo.setAutoRenewPeriod(7776000L);
        tokenInfo.setDefaultFreezeStatus(true);
        tokenInfo.setDefaultKycStatus(true);

        tokenInfo.setAdminKey(
                new EvmKey(
                        Address.ZERO,
                        new byte[] {
                            113, 38, -127, -71, -122, -118, 62, 82, 101, 7, -40, -104, 52, -122,
                            -17, 20, -62, 98, 111, -57, -65, 23, 5, 67, -96, 102, -118, -6, -123, 0,
                            89, -96
                        },
                        new byte[0],
                        Address.ZERO));

        tokenInfo.setKycKey(
                new EvmKey(
                        Address.ZERO,
                        new byte[] {
                            10, 15, -34, 28, 33, -60, -73, 126, -118, 95, -74, -35, -42, -115, -92,
                            -90, -26, -46, 45, -100, -3, -73, 32, 34, 96, -8, 115, 28, -60, -94, 24,
                            -60
                        },
                        new byte[0],
                        Address.ZERO));

        tokenInfo.setWipeKey(
                new EvmKey(
                        Address.ZERO,
                        new byte[] {
                            -120, -12, 112, 11, 85, 25, -66, 76, -83, -44, 11, -40, 28, -44, -43,
                            -30, 46, 60, -5, 88, 6, 49, 52, -114, 115, -26, 85, -87, -54, 53, -118,
                            -116
                        },
                        new byte[0],
                        Address.ZERO));

        tokenInfo.setPauseKey(
                new EvmKey(
                        Address.ZERO,
                        new byte[] {
                            76, 87, 124, 101, 43, 7, 94, -67, 121, -85, -33, -87, -107, 1, -103,
                            112, 53, -82, -55, 27, 50, -3, 5, -121, 115, 98, 84, 102, -67, -48, -1,
                            55
                        },
                        new byte[0],
                        Address.ZERO));

        tokenInfo.setFeeScheduleKey(
                new EvmKey(
                        Address.ZERO,
                        new byte[] {
                            -107, -79, -20, -121, 55, -23, -70, -94, -74, 64, -106, 127, 21, 36, 16,
                            59, 79, 98, -29, 104, 55, 8, -90, 80, -87, -123, -81, -87, -11, 16, -40,
                            32
                        },
                        new byte[0],
                        Address.ZERO));

        tokenInfo.setFreezeKey(
                new EvmKey(
                        Address.ZERO,
                        new byte[] {
                            -96, 103, 79, -31, 51, 115, -94, -65, -108, -110, -11, 4, 53, -69, -123,
                            44, 14, -29, 77, 24, -62, 5, -47, -41, 92, 116, 100, 18, -67, 110, 110,
                            -23
                        },
                        new byte[0],
                        Address.ZERO));

        tokenInfo.setSupplyKey(
                new EvmKey(
                        Address.ZERO,
                        new byte[] {
                            105, 110, -64, -117, -19, -110, -32, -104, 124, 105, 73, 113, -32, -55,
                            120, 120, 26, -102, -68, 63, 125, -82, 6, -2, 93, -6, -86, 104, -11,
                            -59, 32, 30
                        },
                        new byte[0],
                        Address.ZERO));

        final var fixedFee =
                new FixedFee(
                        500L,
                        Address.ZERO,
                        false,
                        false,
                        Address.wrap(
                                Bytes.fromHexString("0x00000000000000000000000000000000000005ce")));

        final var fractionFee =
                new FractionalFee(
                        1,
                        2,
                        5,
                        400,
                        false,
                        Address.wrap(
                                Bytes.fromHexString("0x00000000000000000000000000000000000005cc")));

        final var royaltyFee =
                new RoyaltyFee(
                        1,
                        2,
                        500L,
                        Address.wrap(
                                Bytes.fromHexString("0x00000000000000000000000000000000000005cd")),
                        false,
                        Address.wrap(
                                Bytes.fromHexString("0x00000000000000000000000000000000000005cf")));

        var customFees1 = new CustomFee();
        customFees1.setFixedFee(fixedFee);
        var customFees2 = new CustomFee();
        customFees2.setFractionalFee(fractionFee);
        var customFee3 = new CustomFee();
        customFee3.setRoyaltyFee(royaltyFee);
        var customFees = new ArrayList<CustomFee>();
        customFees.add(customFees1);
        customFees.add(customFees2);
        customFees.add(customFee3);

        tokenInfo.setCustomFees(customFees);

        final var encodeResult = subject.encodeGetTokenInfo(tokenInfo);
        assertEquals(RETURN_GET_TOKEN_INFO, encodeResult);
        assertEquals(1, tokenInfo.getDecimals());
    }

    @Test
    void decodeGetFungibleTokenInfo() {
        final var tokenInfo = tokenInfo();

        final var encodeResult = subject.encodeGetFungibleTokenInfo(tokenInfo);
        assertEquals(RETURN_GET_FUNGIBLE_TOKEN_INFO, encodeResult);
    }

    @Test
    void decodeGetNonFungibleTokenInfo() {
        final var tokenInfo = tokenInfo();
        final var nftInfoWithoutSpender =
                new EvmNftInfo(
                        1L,
                        Address.wrap(
                                Bytes.fromHexString("0x00000000000000000000000000000000000005a6")),
                        7120543443612535051L,
                        ByteString.copyFromUtf8("First").toByteArray(),
                        null,
                        fromHexString("0x03"));
        assertEquals(Address.ZERO, nftInfoWithoutSpender.getSpender());
        assertEquals(fromHexString("0x03").length, nftInfoWithoutSpender.getLedgerId().length);

        final var nftInfo =
                new EvmNftInfo(
                        1L,
                        Address.wrap(
                                Bytes.fromHexString("0x00000000000000000000000000000000000005a6")),
                        7120543443612535051L,
                        ByteString.copyFromUtf8("First").toByteArray(),
                        Address.wrap(
                                Bytes.fromHexString("0x00000000000000000000000000000000000005a7")),
                        fromHexString("0x03"));

        final var encodeResult = subject.encodeGetNonFungibleTokenInfo(tokenInfo, nftInfo);
        assertEquals(RETURN_GET_NON_FUNGIBLE_TOKEN_INFO, encodeResult);
    }

    @Test
    void decodeGetNonFungibleTokenCustomFees() {
        final var customFees = customFees();

        final var encodedResult = subject.encodeTokenGetCustomFees(customFees);
        assertEquals(RETURN_GET_NON_FUNGIBLE_TOKEN_CUSTOM_FEES, encodedResult);
    }

    @Test
    void decodeGetTokenKey() {
        EvmKey wrapper =
                new EvmKey(
                        Address.ZERO,
                        new byte[] {
                            -98, 65, 115, 52, -46, -22, 107, -28, 89, 98, 64, 96, -29, -17, -36, 27,
                            69, -102, -120, 75, -58, -87, -62, 50, 52, -102, -13, 94, -112, 96, -19,
                            98
                        },
                        new byte[0],
                        Address.ZERO);
        final var decodedResult = subject.encodeGetTokenKey(wrapper);
        assertEquals(RETURN_GET_TOKEN_KEY, decodedResult);
    }

    @Test
    void decodeReturnResultForGetExpiryInfoForTokenSuccess() {
        final var expiry = 1667817996L;
        final var autoRenewPeriod = 7776000L;
        final var expiryTokenWrapper = new TokenExpiryInfo(expiry, Address.ZERO, autoRenewPeriod);
        final var expiryTokenWrapper2 = new TokenExpiryInfo(expiry, null, autoRenewPeriod);
        final var decodedResult = subject.encodeGetTokenExpiryInfo(expiryTokenWrapper);
        final var decodedResult2 = subject.encodeGetTokenExpiryInfo(expiryTokenWrapper2);
        assertEquals(RETURN_GET_EXPIRY_INFO_FOR_TOKEN, decodedResult);
        assertEquals(RETURN_GET_EXPIRY_INFO_FOR_TOKEN, decodedResult2);
    }

    private EvmTokenInfo tokenInfo() {
        final var tokenInfo =
                new EvmTokenInfo(
                        fromHexString("0x03"),
                        1,
                        false,
                        "IQDXDFDE",
                        "primary",
                        "JUMP",
                        Address.wrap(
                                Bytes.fromHexString("0x00000000000000000000000000000000000005cc")),
                        500L,
                        1000L,
                        1,
                        1665659019L);

        tokenInfo.setAutoRenewAccount(
                Address.wrap(Bytes.fromHexString("0x00000000000000000000000000000000000005cd")));
        tokenInfo.setIsPaused(true);
        tokenInfo.setAutoRenewPeriod(7776000L);
        tokenInfo.setDefaultFreezeStatus(true);
        tokenInfo.setDefaultKycStatus(true);

        tokenInfo.setAdminKey(
                new EvmKey(
                        Address.ZERO,
                        new byte[] {
                            113, 38, -127, -71, -122, -118, 62, 82, 101, 7, -40, -104, 52, -122,
                            -17, 20, -62, 98, 111, -57, -65, 23, 5, 67, -96, 102, -118, -6, -123, 0,
                            89, -96
                        },
                        new byte[0],
                        Address.ZERO));

        tokenInfo.setKycKey(
                new EvmKey(
                        Address.ZERO,
                        new byte[] {
                            10, 15, -34, 28, 33, -60, -73, 126, -118, 95, -74, -35, -42, -115, -92,
                            -90, -26, -46, 45, -100, -3, -73, 32, 34, 96, -8, 115, 28, -60, -94, 24,
                            -60
                        },
                        new byte[0],
                        Address.ZERO));

        tokenInfo.setWipeKey(
                new EvmKey(
                        Address.ZERO,
                        new byte[] {
                            -120, -12, 112, 11, 85, 25, -66, 76, -83, -44, 11, -40, 28, -44, -43,
                            -30, 46, 60, -5, 88, 6, 49, 52, -114, 115, -26, 85, -87, -54, 53, -118,
                            -116
                        },
                        new byte[0],
                        Address.ZERO));

        tokenInfo.setPauseKey(
                new EvmKey(
                        Address.ZERO,
                        new byte[] {
                            76, 87, 124, 101, 43, 7, 94, -67, 121, -85, -33, -87, -107, 1, -103,
                            112, 53, -82, -55, 27, 50, -3, 5, -121, 115, 98, 84, 102, -67, -48, -1,
                            55
                        },
                        new byte[0],
                        Address.ZERO));

        tokenInfo.setFeeScheduleKey(
                new EvmKey(
                        Address.ZERO,
                        new byte[] {
                            -107, -79, -20, -121, 55, -23, -70, -94, -74, 64, -106, 127, 21, 36, 16,
                            59, 79, 98, -29, 104, 55, 8, -90, 80, -87, -123, -81, -87, -11, 16, -40,
                            32
                        },
                        new byte[0],
                        Address.ZERO));

        tokenInfo.setFreezeKey(
                new EvmKey(
                        Address.ZERO,
                        new byte[] {
                            -96, 103, 79, -31, 51, 115, -94, -65, -108, -110, -11, 4, 53, -69, -123,
                            44, 14, -29, 77, 24, -62, 5, -47, -41, 92, 116, 100, 18, -67, 110, 110,
                            -23
                        },
                        new byte[0],
                        Address.ZERO));

        tokenInfo.setSupplyKey(
                new EvmKey(
                        Address.ZERO,
                        new byte[] {
                            105, 110, -64, -117, -19, -110, -32, -104, 124, 105, 73, 113, -32, -55,
                            120, 120, 26, -102, -68, 63, 125, -82, 6, -2, 93, -6, -86, 104, -11,
                            -59, 32, 30
                        },
                        new byte[0],
                        Address.ZERO));

        final var fixedFee =
                new FixedFee(
                        500L,
                        Address.ZERO,
                        false,
                        false,
                        Address.wrap(
                                Bytes.fromHexString("0x00000000000000000000000000000000000005ce")));

        final var fractionFee =
                new FractionalFee(
                        1,
                        2,
                        5,
                        400,
                        false,
                        Address.wrap(
                                Bytes.fromHexString("0x00000000000000000000000000000000000005cc")));

        final var royaltyFee =
                new RoyaltyFee(
                        1,
                        2,
                        500L,
                        Address.wrap(
                                Bytes.fromHexString("0x00000000000000000000000000000000000005cd")),
                        false,
                        Address.wrap(
                                Bytes.fromHexString("0x00000000000000000000000000000000000005cf")));

        var customFees1 = new CustomFee();
        customFees1.setFixedFee(fixedFee);
        var customFees2 = new CustomFee();
        customFees2.setFractionalFee(fractionFee);
        var customFee3 = new CustomFee();
        customFee3.setRoyaltyFee(royaltyFee);
        var customFees = new ArrayList<CustomFee>();
        customFees.add(customFees1);
        customFees.add(customFees2);
        customFees.add(customFee3);

        tokenInfo.setCustomFees(customFees);

        return tokenInfo;
    }

    private List<CustomFee> customFees() {
        List<com.hedera.node.app.service.evm.store.contracts.precompile.codec.CustomFee>
                customFees = new ArrayList<>();
        FixedFee fixedFeeInHbar =
                new FixedFee(
                        100,
                        null,
                        true,
                        false,
                        Address.wrap(
                                Bytes.fromHexString("0x00000000000000000000000000000000000005ca")));
        FixedFee fixedFeeInHts =
                new FixedFee(
                        100,
                        Address.wrap(
                                Bytes.fromHexString("0x00000000000000000000000000000000000005cc")),
                        false,
                        false,
                        Address.wrap(
                                Bytes.fromHexString("0x00000000000000000000000000000000000005ca")));
        FixedFee fixedFeeSameToken =
                new FixedFee(
                        50,
                        null,
                        true,
                        false,
                        Address.wrap(
                                Bytes.fromHexString("0x00000000000000000000000000000000000005ca")));
        FractionalFee fractionalFee =
                new FractionalFee(
                        15,
                        100,
                        10,
                        50,
                        false,
                        Address.wrap(
                                Bytes.fromHexString("0x00000000000000000000000000000000000005ca")));

        com.hedera.node.app.service.evm.store.contracts.precompile.codec.CustomFee customFee1 =
                new com.hedera.node.app.service.evm.store.contracts.precompile.codec.CustomFee();
        customFee1.setFixedFee(fixedFeeInHbar);
        com.hedera.node.app.service.evm.store.contracts.precompile.codec.CustomFee customFee2 =
                new com.hedera.node.app.service.evm.store.contracts.precompile.codec.CustomFee();
        customFee2.setFixedFee(fixedFeeInHts);
        com.hedera.node.app.service.evm.store.contracts.precompile.codec.CustomFee customFee3 =
                new com.hedera.node.app.service.evm.store.contracts.precompile.codec.CustomFee();
        customFee3.setFixedFee(fixedFeeSameToken);
        com.hedera.node.app.service.evm.store.contracts.precompile.codec.CustomFee customFee4 =
                new com.hedera.node.app.service.evm.store.contracts.precompile.codec.CustomFee();
        customFee4.setFractionalFee(fractionalFee);

        return List.of(customFee1, customFee2, customFee3, customFee4);
    }

    private byte[] fromHexString(final String value) {
        return Bytes.fromHexString(value).toArray();
    }
}
