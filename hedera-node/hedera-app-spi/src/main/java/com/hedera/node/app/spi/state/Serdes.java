/*
 * Copyright (C) 2022-2023 Hedera Hashgraph, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.hedera.node.app.spi.state;

import edu.umd.cs.findbugs.annotations.NonNull;
import java.io.DataInput;
import java.io.DataOutput;
import java.io.IOException;
import java.util.NoSuchElementException;

/**
 * Encapsulates <strong>Ser</strong>ialization and <strong>Des</strong>erialization.
 *
 * <p>This interface will be moved to PBJ and implementations of this interface will be generated by
 * PBJ for all protobuf schema objects. Until then, the interface will live here.
 *
 * @param <T> The type of object to serialize and deserialize
 */
@SuppressWarnings("SpellCheckingInspection")
public interface Serdes<T> {
    /**
     * Parses an object from the {@link DataInput} and returns it.
     *
     * @param input The {@link DataInput} from which to read the data to construct an object
     * @return The parsed object. It must not return null.
     * @throws IOException If it is impossible to read from the {@link DataInput}
     * @throws NoSuchElementException If there is no element of type T that can be parsed from this
     *     input
     */
    @NonNull
    T parse(@NonNull DataInput input) throws IOException;

    /**
     * Writes an item to the given {@link DataOutput}.
     *
     * @param item The item to write. Must not be null.
     * @param output The {@link DataOutput} to write to.
     * @throws IOException If the {@link DataOutput} cannot be written to.
     */
    void write(@NonNull T item, @NonNull DataOutput output) throws IOException;

    /**
     * Reads from this data input the length of the data within the input. The implementation may
     * read all the data, or just some special serialized data, as needed to find out the length of
     * the data.
     *
     * @param input The input to use
     * @return The length of the data item in the input
     * @throws IOException If it is impossible to read from the {@link DataInput}
     */
    int measure(@NonNull DataInput input) throws IOException;

    /**
     * A number that represents the typical size of a serialized object of this type in bytes.
     *
     * @return A non-negative integer.
     */
    int typicalSize();

    /**
     * Compares the given item with the bytes in the input, and returns false if it determines that
     * the bytes in the input could not be equal to the given item. Sometimes we need to compare an
     * item in memory with serialized bytes and don't want to incur the cost of deserializing the
     * entire object, when we could have determined the bytes do not represent the same object very
     * cheaply and quickly.
     *
     * @param item The item to compare. Cannot be null.
     * @param input The input with the bytes to compare
     * @return true if the bytes represent the item, false otherwise.
     */
    boolean fastEquals(@NonNull T item, @NonNull DataInput input);
}
